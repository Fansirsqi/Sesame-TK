name: Android CI

on:
  push:
    branches: ["develop"]
  pull_request:
    branches: ["develop"]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set Timezone to Asia/Shanghai
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          echo "Current time: $(date)"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "zulu"
          cache: gradle

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-version: wrapper

      - name: Set Version
        id: set_version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION=${{ github.event.release.tag_name }}
          elif [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION=$(date +%Y.%m.%d)-${{ github.run_number }}
          else
            VERSION=manual-${{ github.run_id }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Extract short SHA
        id: sha
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew assembleNormalRelease assembleCompatibleRelease -Pversion=${{ steps.set_version.outputs.version }}

      - name: Locate APKs and Set Outputs
        id: locate_apks
        run: |
          normal_apk=$(find app/build/outputs/apk/normal/release -name "*.apk" | head -n 1)
          compatible_apk=$(find app/build/outputs/apk/compatible/release -name "*.apk" | head -n 1)
          
          if [ -z "$normal_apk" ]; then
            echo "Error: Normal APK not found"
            exit 1
          fi
          
          if [ -z "$compatible_apk" ]; then
            echo "Error: Compatible APK not found"
            exit 1
          fi
          
          echo "normal_apk=$normal_apk" >> $GITHUB_OUTPUT
          echo "compatible_apk=$compatible_apk" >> $GITHUB_OUTPUT

      - name: Copy APKs to staging for signing
        run: |
          mkdir -p app/build/outputs/apk/all
          cp "${{ steps.locate_apks.outputs.normal_apk }}" app/build/outputs/apk/all/
          cp "${{ steps.locate_apks.outputs.compatible_apk }}" app/build/outputs/apk/all/

      - name: Sign APKs
        id: sign_apks
        run: |
          # ‰∏ãËΩΩÂØÜÈí•Â∫ì
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/keystore/release.jks
          
          # Á≠æÂêçÈÖçÁΩÆ
          KEYSTORE_PATH=app/keystore/release.jks
          KEYSTORE_PASS=${{ secrets.KEYSTORE_PASS }}
          KEY_ALIAS=${{ secrets.KEY_ALIAS }}
          KEY_PASS=${{ secrets.KEY_PASS }}
          
          # Ëé∑ÂèñAPKË∑ØÂæÑ
          normal_apk=${{ steps.locate_apks.outputs.normal_apk }}
          compatible_apk=${{ steps.locate_apks.outputs.compatible_apk }}
          
          # ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
          mkdir -p app/build/outputs/apk/signed
          
          # Á≠æÂêçNormal APK
          normal_signed=app/build/outputs/apk/signed/$(basename "$normal_apk" .apk)-signed.apk
          apksigner sign --ks "$KEYSTORE_PATH" --ks-pass pass:"$KEYSTORE_PASS" --ks-key-alias "$KEY_ALIAS" --key-pass pass:"$KEY_PASS" --out "$normal_signed" "$normal_apk"
          
          # Á≠æÂêçCompatible APK
          compatible_signed=app/build/outputs/apk/signed/$(basename "$compatible_apk" .apk)-signed.apk
          apksigner sign --ks "$KEYSTORE_PATH" --ks-pass pass:"$KEYSTORE_PASS" --ks-key-alias "$KEY_ALIAS" --key-pass pass:"$KEY_PASS" --out "$compatible_signed" "$compatible_apk"
          
          # È™åËØÅÁ≠æÂêç
          apksigner verify "$normal_signed"
          apksigner verify "$compatible_signed"
          
          echo "signedFiles=$normal_signed:$compatible_signed" >> $GITHUB_OUTPUT

      - name: Extract Signed APK Paths
        id: extract_apks
        run: |
          IFS=':' read -r -a files <<< "${{ steps.sign_apks.outputs.signedFiles }}"
          for file in "${files[@]}"; do
            if [[ "$file" == *Normal* ]]; then
              echo "signed_normal=$file" >> $GITHUB_OUTPUT
            elif [[ "$file" == *Compatible* ]]; then
              echo "signed_compatible=$file" >> $GITHUB_OUTPUT
            fi
          done

      - name: Upload APK - Compatible
        uses: actions/upload-artifact@v4
        with:
          name: apk-compatible
          path: ${{ steps.extract_apks.outputs.signed_compatible }}

      - name: Upload APK - Normal
        uses: actions/upload-artifact@v4
        with:
          name: apk-normal
          path: ${{ steps.extract_apks.outputs.signed_normal }}

      - name: Extract file names
        id: extract_info
        run: |
          normal_file=$(basename "${{ steps.extract_apks.outputs.signed_normal }}")
          compatible_file=$(basename "${{ steps.extract_apks.outputs.signed_compatible }}")
          # ÊèêÂèñÁâàÊú¨Âè∑Ôºà‰ª•"Normal-"Êàñ"Compatible-"‰πãÂêéÁöÑÈÉ®ÂàÜ‰∏∫Ëµ∑ÁÇπÔºå‰ª•"-signed"‰πãÂâçÁöÑÂÜÖÂÆπ‰∏∫ÁªàÁÇπÔºâ
          version=$(echo "$normal_file" | sed -E 's/.*-(Normal|Compatible)-(.*)-signed\.apk/\2/')
          echo "normal_file=$normal_file" >> $GITHUB_OUTPUT
          echo "compatible_file=$compatible_file" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Generate APKS Checksum
        run: |
          sha256sum ${{ steps.extract_apks.outputs.signed_normal }} > CHECKSUMS-Sesame-Normal-${{ steps.extract_info.outputs.version }}.${{ steps.sha.outputs.SHORT_SHA }}-signed.apk.sha256
          sha256sum ${{ steps.extract_apks.outputs.signed_compatible }} > CHECKSUMS-Sesame-Compatible-${{ steps.extract_info.outputs.version }}.${{ steps.sha.outputs.SHORT_SHA }}-signed.apk.sha256

      - name: Get Commit Details
        id: commit_details
        run: |
          COMMIT_MESSAGE_BODY=$( \
            if [[ "${{ github.event_name }}" == "push" ]]; then \
              echo "üî® $(git rev-list --count ${{ github.event.before }}..${{ github.event.after }}) new commits to ${{ github.repository }}:${{ github.ref_name }} ([compare view](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.event.after }}))"; \
              echo ""; \
              git log --format="  %h ([view commit](https://github.com/${{ github.repository }}/commit/%H)): %s by %an" ${{ github.event.before }}..${{ github.event.after }}; \
            elif [[ "${{ github.event_name }}" == "pull_request" ]]; then \
              echo "üì¶ Pull Request #${{ github.event.number }} for ${{ github.repository }}: ${{ github.head_ref }} -> ${{ github.base_ref }} ([view PR](https://github.com/${{ github.repository }}/pull/${{ github.event.number }}))"; \
              echo ""; \
              echo "Commits:"; \
              git log --format="  %h ([view commit](https://github.com/${{ github.repository }}/commit/%H)): %s by %an" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}; \
            elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then \
              echo "‚öôÔ∏è Manual workflow run on ${{ github.ref_name }} by ${{ github.actor }}"; \
              echo ""; \
              echo "Latest commit:"; \
              git log -1 --format="  %h ([view commit](https://github.com/${{ github.repository }}/commit/%H)): %s by %an"; \
            else \
              echo "‚ÑπÔ∏è Commit information for ${{ github.event_name }} event on ${{ github.ref_name }} by ${{ github.actor }}:"; \
              echo ""; \
              git log -1 --format="  %h ([view commit](https://github.com/${{ github.repository }}/commit/%H)): %s by %an"; \
            fi \
          )
          echo "COMMIT_MESSAGE_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Combined Message
        uses: appleboy/telegram-action@v0.4.7
        with:
          to: ${{ secrets.TG_CHAT_ID }}
          token: ${{ secrets.TG_BOT_TOKEN }}
          message: |
            üì¶ *New Version ${{ steps.extract_info.outputs.version }} Build!*

            - Files: 
              - Normal: `${{ steps.extract_info.outputs.normal_file }}`
              - Compatible: `${{ steps.extract_info.outputs.compatible_file }}`
            - Branch: `${{ github.ref_name }}`
            - Triggered by: `${{ github.actor }}`

            *‰∏ãËΩΩËØ¥Êòé:*
              * Normal ‰∏∫Ê≠£Â∏∏ÁâàÊú¨,ÈÄÇÁî®‰∫é`Android 8.0`Âèä‰ª•‰∏äÁöÑÁ≥ªÁªü
              * Compatible ‰∏∫ÂÖºÂÆπÁâàÊú¨,ÈÄÇÁî®‰∫é`Android 7.0`Âèä‰ª•‰∏ãÁöÑÁ≥ªÁªü,ÊúÄ‰ΩéÊîØÊåÅ`Android 5.1`

            ${{ steps.commit_details.outputs.COMMIT_MESSAGE_BODY }}
          format: markdown

      - name: Send Normal APK
        uses: appleboy/telegram-action@v0.4.7
        with:
          to: ${{ secrets.TG_CHAT_ID }}
          token: ${{ secrets.TG_BOT_TOKEN }}
          document: ${{ steps.extract_apks.outputs.signed_normal }}

      - name: Send Compatible APK
        uses: appleboy/telegram-action@v0.4.7
        with:
          to: ${{ secrets.TG_CHAT_ID }}
          token: ${{ secrets.TG_BOT_TOKEN }}
          document: ${{ steps.extract_apks.outputs.signed_compatible }}

      - name: Create Tag from Version
        if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/develop')
        run: |
          VERSION_TAG="v${{ steps.extract_info.outputs.version }}"
          echo "Creating tag: $VERSION_TAG"
          git tag "$VERSION_TAG"
          git push origin "$VERSION_TAG"

      - name: Upload Assets to Source Release
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/develop')
        with:
          name: ${{ github.event.release.tag_name || steps.extract_info.outputs.version }}
          files: |
            ${{ steps.extract_apks.outputs.signed_compatible }}
            ${{ steps.extract_apks.outputs.signed_normal }}
            CHECKSUMS-Sesame-Normal-${{ steps.extract_info.outputs.version }}.${{ steps.sha.outputs.SHORT_SHA }}-signed.apk.sha256
            CHECKSUMS-Sesame-Compatible-${{ steps.extract_info.outputs.version }}.${{ steps.sha.outputs.SHORT_SHA }}-signed.apk.sha256
          tag_name: ${{ steps.extract_info.outputs.version }}
          draft: false
          append_body: true
          generate_release_notes: true
          body: |
            ## ‚ú®What's Changed

            ${{ steps.commit_details.outputs.COMMIT_MESSAGE_BODY }}
            > ## ‰∏ãËΩΩËØ¥Êòé
              * Normal ‰∏∫Ê≠£Â∏∏ÁâàÊú¨,ÈÄÇÁî®‰∫é`Android 8.0`Âèä‰ª•‰∏äÁöÑÁ≥ªÁªü
              * Compatible ‰∏∫ÂÖºÂÆπÁâàÊú¨,ÈÄÇÁî®‰∫é`Android 7.0`Âèä‰ª•‰∏ãÁöÑÁ≥ªÁªü,ÊúÄ‰ΩéÊîØÊåÅ`Android 5.1`

            > ~~Â¢ôÂÜÖ‰∏çÂÜçÊõ¥Êñ∞~~ ÂÄíÂçñÂøÖÊ≠ªÂÖ®ÂÆ∂

      - name: Sync Release to Target Repository
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/develop')
        with:
          repository: Xposed-Modules-Repo/fansirsqi.xposed.sesame
          name: ${{ github.event.release.tag_name || steps.extract_info.outputs.version }}
          files: |
            ${{ steps.extract_apks.outputs.signed_compatible }}
            ${{ steps.extract_apks.outputs.signed_normal }}
            CHECKSUMS-Sesame-Normal-${{ steps.extract_info.outputs.version }}.${{ steps.sha.outputs.SHORT_SHA }}-signed.apk.sha256
            CHECKSUMS-Sesame-Compatible-${{ steps.extract_info.outputs.version }}.${{ steps.sha.outputs.SHORT_SHA }}-signed.apk.sha256
          token: ${{ secrets.TARGET_REPO_PAT }}
          tag_name: ${{ steps.extract_info.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.extract_info.outputs.version, 'alpha') || contains(steps.extract_info.outputs.version, 'beta') }}
          append_body: false
          make_latest: true
          body: |
            üì¶ Êú¨ Release ÂêåÊ≠•Ëá™Ê∫ê‰ªìÂ∫ì [Sesame-TK](https://github.com/${{ github.repository }})
            ‚ú® **Êõ¥Êñ∞ÂÜÖÂÆπ**:
            ${{ github.event.release.body || steps.commit_details.outputs.COMMIT_MESSAGE_BODY }}    
            üì¶ Êú¨ Release ÂêåÊ≠•Ëá™Ê∫ê‰ªìÂ∫ì [Sesame-TK](https://github.com/${{ github.repository }})
            ‚ú® **Êõ¥Êñ∞ÂÜÖÂÆπ**:
            ${{ github.event.release.body || 'Êó†Êõ¥Êñ∞ËØ¥Êòé' }}
